name: Node.js CI

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
      - run: npm run lint-check
      - run: npm run test

  dependabot-automerge:
    needs: [build]
    if: >
      github.event_name == 'pull_request' &&
      github.event.pull_request.user.login == 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Rename patch-package files to match updated versions
        shell: bash
        run: |
          get_version() {
            jq -r ".dependencies[\"$1\"] // .devDependencies[\"$1\"]" package.json
          }

          for PATCH in patches/*.patch; do
            BASE=$(basename "$PATCH" .patch)

            # Convert patch filename back to package name
            PACKAGE=$(echo "$BASE" | sed 's|+|/|g')

            VERSION=$(get_version "$PACKAGE")
            if [ "$VERSION" == "null" ]; then
              echo "Skipping $PACKAGE â€” not found in package.json"
              continue
            fi

            NEW_NAME=$(echo "$PACKAGE" | sed 's|/|+|g')"+${VERSION}.patch"
            if [ "$BASE.patch" != "$NEW_NAME" ]; then
              echo "Renaming $BASE.patch -> $NEW_NAME"
              git mv "$PATCH" "patches/$NEW_NAME"
            fi
          done
      - name: Automerge Dependabot PRs if all checks have passed
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr merge --squash ${{ github.event.pull_request.number }}
